<!-- ===================================================================== -->
<!-- Custom targets called from a project's generated build.xml            -->
<!-- Set customBuildCallbacks=<path/to/this/file> in your build.properties.-->
<!-- ===================================================================== -->
<project name="Build specific targets and properties" default="noDefault">

	<property environment="env"/>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.jars                              -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.jars">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.jars                               -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.sources                            -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the compilation target <name>                      -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="pre.name">
	</target>

	<target name="pre.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do during the compilation target <name>, after the compile   -->
	<!-- but before jaring.  Substitute "name" with the name of the compilation-->
	<!-- target, eg @dot                                                       -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.compile.name">
	</target>

	<target name="post.compile.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the compilation target <name>                       -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   jar.location - the location of the compilation results              -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.name">
	</target>

	<target name="post.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="pre.gather.bin.parts">
	</target>
	
	
	<target name="davinciPlugin.build" if="run.dojo.build" unless="davinciPlugin.build.exists">
		<echo message="Doing ${davinciPlugin.id} build" />
		<property name="logExtension" value=".log"/>
		<property name="logFile" value="${build.result.folder}/@dot${logExtension}"/>

		<copy todir="${target.folder}" failonerror="true" overwrite="true" description="copying base dojo">
				<fileset dir="${basedir}/../maqetta.core.client">
					<include name="WebContent/dojo/"/>
				</fileset>
		</copy>
		
		<copy todir="${target.folder}" failonerror="true" overwrite="true" description="copying dijit">
				<fileset dir="${basedir}/../maqetta.core.client">
					<include name="WebContent/dijit/"/>
				</fileset>
		</copy>
		
		<copy todir="${target.folder}" failonerror="true" overwrite="true" description="copying Dojo tools">
				<fileset dir="${basedir}/../maqetta.core.client">
					<include name="WebContent/util/"/>
				</fileset>
		</copy>
		
		<copy todir="${target.folder}/WebContent/${davinciPlugin.metadata.moduleId}" failonerror="true" overwrite="true" description="copying metadata files">
				<fileset dir="${target.folder}/WebContent/metadata">
					<include name="${davinciPlugin.id}/"/>
				</fileset>
		</copy>

		<!-- Replace "metadata" in dojo profile for the plugin with the module id Maqetta 
			 will use for the plugin's metadata at runtime -->
		<replace file="${target.folder}/${davinciPlugin.dojo.profile}" token="metadata" value="${davinciPlugin.metadata.moduleId}"/>
		
		<java fork="true" resultproperty="returnCode" failonerror="true" output="${logFile}" append="true" dir="${target.folder}/WebContent/util/buildscripts"
			    maxmemory="1024m"
				classpath="${target.folder}/WebContent/util/shrinksafe/js.jar;${target.folder}/WebContent/util/shrinksafe/shrinksafe.jar"
				classname="org.mozilla.javascript.tools.shell.Main"
				description="Run Dojo build script"
				>
				<arg value="${target.folder}/WebContent/dojo/dojo.js"/>
				<arg value="baseUrl=${target.folder}/WebContent/dojo"/>
				<arg value="load=build"/>
				<arg value="profileFile=${target.folder}/${davinciPlugin.dojo.profile}"/>
				<arg value="action=release"/>
				<arg value="cssOptimize=comments.keepLines"/>
				<arg value="layerOptimize=shrinksafe.keepLines"/>
		</java>

		<mkdir dir="${davinciPlugin.dojo.cache.directory}"/>

		<echo message="caching ${davinciPlugin.id} build.."/>
		
		<copy todir="${davinciPlugin.dojo.cache.directory}" failonerror="true" overwrite="true" description="move ${davinciPlugin.id} build">
					<fileset dir="${target.folder}/WebContent/release/dojo">
						<include name="${davinciPlugin.id}/"/>
					</fileset>
		</copy>
		
		<copy todir="${davinciPlugin.dojo.cache.directory}/metadata" failonerror="true" overwrite="true" description="move ${davinciPlugin.id} metadata build">
			<fileset dir="${target.folder}/WebContent/release/dojo/${davinciPlugin.metadata.moduleId}">
				<include name="${davinciPlugin.id}/"/>
			</fileset>
		</copy>
		
		<delete dir="${target.folder}/WebContent/release" />
	</target>
	
	<target name="copy.davinciPlugin" if="run.dojo.build">
		<delete dir="${target.folder}/WebContent/util"/>
		<delete dir="${target.folder}/WebContent/dojo"/>
		<delete dir="${target.folder}/WebContent/dijit"/>
		<delete dir="${target.folder}/WebContent/${davinciPlugin.metadata.moduleId}"/>
		<copy todir="${target.folder}/WebContent" failonerror="true" overwrite="true" description="Copy cached ${davinciPlugin.id} build">
			<fileset dir="${davinciPlugin.dojo.cache.directory}">
				<include name="${davinciPlugin.id}/"/>
				<include name="metadata/"/>
			</fileset>
		</copy>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="post.gather.bin.parts">
		<!-- Examine plugin.xml to get the plugin's id and version. -->
		<xmlproperty file="${target.folder}/plugin.xml" collapseAttributes="true"/>
		
		<property name="davinciPlugin.id" value="${plugin.extension.ajaxLibrary.id}"/>
		<echo>Post gather for &quot;${davinciPlugin.id}&quot;, version=&quot;${plugin.extension.ajaxLibrary.version}&quot; ...</echo>

        <!-- Roundabout way to replace periods in the version with underscores -->
    	<echo message="${plugin.extension.ajaxLibrary.version}" file="davinciPlugin.tmp.file" />
    	<loadfile property="davinciPlugin.normalizedVersion" srcFile="davinciPlugin.tmp.file">
        	<filterchain>
            	<tokenfilter>
                	<replaceregex pattern="\." replace="_" flags="g"/>
            	</tokenfilter>
        	</filterchain>
    	</loadfile>
    	<delete file="davinciPlugin.tmp.file" />

		<property name="davinciPlugin.dojo.cache.directory" value="${dojo.cache.directory}/${davinciPlugin.id}-${davinciPlugin.normalizedVersion}"/>
		<property name="davinciPlugin.metadata.moduleId" value="maq-metadata-${davinciPlugin.id}-${davinciPlugin.normalizedVersion}"/>
		<property name="davinciPlugin.dojo.profile" value="${davinciPlugin.id}.profile.js"/>
    	<condition property="davinciPlugin.build.exists">
    		<available file="${davinciPlugin.dojo.cache.directory}" type="dir"/>
    	</condition>
		<echo message="Build ${davinciPlugin.id}=${run.dojo.build}"/>
		<antcall target="davinciPlugin.build"/>

		<antcall target="copy.davinciPlugin"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.sources                          -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.logs                             -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.logs                              -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target clean                                   -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.clean">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target clean                                    -->
	<!-- Available parameters :                                                -->
	<!--   plugin.destination - final destination of the build                 -->
	<!--   build.result.folder - results of the compilation                    -->
	<!--   temp.folder - temporary folder                                      -->
	<!-- ===================================================================== -->
	<target name="post.clean">
	</target>
</project>
