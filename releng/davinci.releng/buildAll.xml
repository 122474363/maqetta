<project name="maqetta" default="nightly">
	
	<!--  This line loads either internal.xml or external.xml.  These files copy the deps from the git repos.
	      The git repos are initialized in the shell script prior to running the build script.
	      
	      Internal repo is ${buildDirectory}/repository/maqetta
	      External repo is ${buildDirectoyr}/repository/maqetta_internal
	      Equinox (dep for running war): ${buildDirectory}/repository/rt.equinox.bundles
	
	-->
	<import file="common.xml"/>
	<import file="${deployment-type}.xml"/>
	
	
	<target name="nightly" depends="init">
        <tstamp>
            <format property="maqBuildTime" timezone="GMT-05:00" pattern="yyyy-MM-dd-HH:mm:ss"/>
        </tstamp>
        <antcall target="clean"/>
		<!-- base maqetta out of depends.xml -->
		<antcall target="populateBaseMaqetta"/>
		
		<!-- populate function out of internal.xml or external.xml -->
        <antcall target="populate"/>
        <antcall target="zips"/>
        <antcall target="war"/>
		<antcall target="ear"/>
    </target>

    <target name="init">
        <!--  copy environment vars -->
        <property environment="env"/>
        <macrodef name="initEnvVar">
            <attribute name="varName"/>
            <attribute name="envName" default="env.@{varName}"/>
            <sequential>
                <condition property="@{varName}" value="${@{envName}}">
                    <and>
                        <not>
                            <isset property="@{varName}"/>
                        </not>
                        <isset property="@{envName}"/>
                    </and>
                </condition>
            </sequential>
        </macrodef>
        <initEnvVar varName="base"/>
        <initEnvVar varName="baseLocation"/>
        <initEnvVar varName="buildDirectory"/>
        <initEnvVar varName="maqettaCode"/>
        <initEnvVar varName="gitRepository"/>
        <initEnvVar varName="myOS"/>
        <initEnvVar varName="myWS"/>
        <initEnvVar varName="myArch"/>
        <initEnvVar varName="equinoxRepo"/>
    	
    	
        <property file="build.properties">
        </property>
        <mkdir dir="${buildDirectory}/plugins"/>
        <mkdir dir="${buildDirectory}/features"/>

    	<property name="repoName" value="maqetta" />
    	<property name="repoNameInternal" value="${repoName}_internal"/>
    	<property name="repoPath" value="${buildDirectory}/repository/${repoName}"/>
        <property name="repoPathInternal" value="${buildDirectory}/repository/${repoNameInternal}"/>
        
        <!-- default maqettaCodeInternal to the value of $maqettaCode concatenated with "_internal" -->
        <condition property="maqettaCodeInternal" value="${maqettaCode}_internal">
            <and>
                <isset property="maqettaCode"/>
                <not>
                    <isset property="maqettaCodeInternal"/>
                </not>
            </and>
        </condition>        
        <condition property="run.internal.targets">
            <equals arg1="${deployment-type}" arg2="internal"/>
        </condition>
        <condition property="run.external.targets">
            <equals arg1="${deployment-type}" arg2="external"/>
        </condition>
    </target>

	<!-- Build the 3 types of zips from each of their product files.  
	     There is internal zip, external zip and joomla zip -->
	
	<target name="zips" depends="extZips, intZips, joomla" />
	<!-- internal zip -->
    <target name="intZips" if="run.internal.targets">
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/zipFile"/>
        	<property name="product" value="davinci.product/DavinciServer-internal.product"/>
        	<property name="maqettaArchiveName" value="w3ibm-maqetta.zip"/>
        </ant>
    </target>
	
	<!-- joomla zip -->
    <target name="joomla" if="run.external.targets">
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/zipFile"/>
        	<property name="product" value="davinci.product/DavinciServer-Joomla.product"/>
        	<property name="maqettaArchiveName" value="joomla-maqetta.zip"/>
        </ant>

    </target>
	<!-- External Zips -->
    <target name="extZips" if="run.external.targets">
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/zipFile"/>
        	<property name="product" value="davinci.product/DavinciServer-external.product"/>
        	<property name="maqettaArchiveName" value="maqetta.zip"/>
        </ant>
    </target>
	
	
	<!-- build the internal and external EAR -->
	<target name="ear" depends="extEAR,intEAR"/>
	
	<target name="extEAR" if="run.external.targets">
        <antcall target="makeEar">
            <param name="warFileName" value="davinci.war"/>
        	<param name="warProject" value="davinci.war"/>
        	<param name="earFile" value="davinci.ear"/>
        </antcall>
	</target>

	<target name="intEAR" if="run.internal.targets">
        <antcall target="makeEar">
            <param name="warFileName" value="w3-davinci.war"/>
        	<param name="warProject" value="davinci.w3war"/>
        	<param name="earFile" value="w3-davinci.ear"/>
        </antcall>
	</target>

	<!-- build the internal and external WAR -->
	<target name="war" depends="extWar,intWar"/>
   
	<target name="extWar" if="run.external.targets">
        <!-- build servlet bridge separately first because it is not part of the feature built -->
        <!--
        -->
        <antcall target="buildPlugin">
            <param name="pluginName" value="org.eclipse.equinox.servletbridge"/>
        </antcall>
        <delete>
            <fileset dir="${buildDirectory}/${buildLabel}" includes="org.eclipse.equinox.servletbridge*.jar">
            </fileset>
        </delete>
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/warFile"/>
        	<property name="warProject" value="davinci.war"/>
        	
        </ant>
    </target>

    <target name="intWar" if="run.internal.targets">
	    <!-- build servlet bridge separately first because it is not part of the feature built -->
	    <!--
	     -->
		<antcall target="buildPlugin">
			<param name="pluginName" value="org.eclipse.equinox.servletbridge"/>
		</antcall>
		<delete >
			<fileset dir="${buildDirectory}/${buildLabel}" includes="org.eclipse.equinox.servletbridge*.jar"></fileset>
		</delete>
		<ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
			<property name="builder" value="${basedir}/warFile"/>
			<property name="warProject" value="davinci.w3war"/>
			<property name="warFileName" value="w3-davinci.war"/>
		</ant>
	</target>

	<target name="buildPlugin">
        <property name="pluginDestination" value="${buildDirectory}/${buildLabel}"/>
        <eclipse.generateFeature
         featureId="${pluginName}.feature"
         buildDirectory="${buildDirectory}"
         baseLocation="${baseLocation}"
         productFile="${product}"
         verify="false"
         pluginPath="${buildDirectory}"
         pluginList="${pluginName}"
         includeLaunchers="false"
        />
        <ant antfile="build.xml" dir="${eclipse.pdebuild.scripts}">
            <property name="component" value="${pluginName}.feature"/>
            <property name="builder" value="${basedir}/genericPlugin"/>
            <property name="outputUpdateJars" value="true"/>
            <property name="topLevelElementId " value="${pluginName}.feature"/>
            <property name="javacfailonerror" value="true"/>
        </ant>

        <!-- at this point the plugin is in a zip file,  unzip the jar to the desired location -->
        <property name="tmpDir" value="${buildDirectory}/tempJar"/>
        <mkdir dir="${tmpDir}"/>
        <unzip dest="${tmpDir}" src="${buildDirectory}/${buildLabel}/${pluginName}.feature-release.zip"/>
        <move toDir="${pluginDestination}">
            <fileset file="${tmpDir}/eclipse/plugins/*.jar">
            </fileset>
        </move>
		<!--
        <delete dir="${tmpDir}"/>
        <delete file="${buildDirectory}/${buildLabel}/${pluginName}.feature-release.zip"/>
    	<delete dir="${buildDirectory}/features/${pluginName}.feature"/>
		-->
    </target>

    <target name="makeEar">
        <mkdir dir="${buildDirectory}/ear"/>
    	
        <copy todir="${buildDirectory}/ear" file="${buildDirectory}/${buildLabel}/${warFileName}"/>
        <copy todir="${buildDirectory}/ear">
            <fileset dir="${buildDirectory}/features/${warProject}/earRootFiles"/>
        </copy>
        <zip destfile="${buildDirectory}/${buildLabel}/${earFile}" filesonly="false">
            <zipfileset dir="${buildDirectory}/ear" includes="**/**" excludes=""/>
        </zip>
        <delete dir="${buildDirectory}/ear"/>
    </target>

    <target name="clean" depends="init">
        <defaultexcludes remove="**/.gitignore"/>
        <defaultexcludes remove="**/.git"/>
        <defaultexcludes remove="**/.git/**"/>

        <delete includeemptydirs="true">
            <fileset dir="${buildDirectory}" includes="plugins/,features/,result/,*.properties,*.xml"/>
        </delete>
        <defaultexcludes default="true"/>
        <mkdir dir="${buildDirectory}/plugins"/>
        <mkdir dir="${buildDirectory}/features"/>
    </target>

</project>